package com.korea.todo.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.korea.todo.model.ResponseDTO;
import com.korea.todo.model.TodoDTO;
import com.korea.todo.model.TodoEntity;
import com.korea.todo.service.TodoService;

import lombok.Builder;

@RestController
@RequestMapping("todo")
public class TodoController {
	
	//실행할 때 service객체가 필드로 직접 주입이 된다.
	@Autowired
	TodoService service;
	
	//주입받은 객체로 메서드를 실행하면된다.
//	@GetMapping("/test")
//	public ResponseEntity<?> testTodo(){
//		//service클래스에 있는 메서드를 호출
//		String str = service.testService();
//		List list = new ArrayList<>();
//		list.add(str);
//		ResponseDTO<String> response = ResponseDTO.<String>builder().data(list).build();
//		return ResponseEntity.ok().body(response);
//	}
	
	//요청을 통햇 ㅓ넘어오는 정보는 요청본문에 담겨서 온다.
	@PostMapping
	public ResponseEntity<?> createTodo(@RequestBody TodoDTO dto){
		try {
			String tempararyUserId = "temporary-user"; //임시 유저 아이디
			//TodoDTO객체를 TodoEntity객체로 변환한다.
			TodoEntity entity = dto.toEntity(dto);
			
			//id 값을 명시적으로 null로 설정하여, 엔티티가 새로운 데이터임을 보장한다.
			entity.setId(null);
			
			//임시 유저 id를 설정한다. 뒤에가서 바꿀 예정
			//지금은 인증, 인가 가능이 없으므로 한 명만 로그인 없이 사용가능한 어플리케이션이라고 가정
			entity.setUserId(tempararyUserId);
			
			//서비스 계층에 있는 create메서드를 호출하여, TodoEntity를
			//데이터베이스에 저장하는 작업을 수행
			//이 메서드는 추가만 하는것이 아니라 저장된 TodoEntity객체들을
			//저장한 리스트를 반환한다.
			List<TodoEntity> entities = service.create(entity);
			
			//자바스트림을 이용해 반환된 엔티티 리스트를 TodoDTO리스트로 변환한다
			//TodoDTO::new -> TodoDTO 생성자의 호출
			List<TodoDTO> dtos = entities.stream().map(TodoDTO::new).collect(Collectors.toList());
			ResponseDTO<TodoDTO> response = ResponseDTO.<TodoDTO>builder().data(dtos).build();
			
			return ResponseEntity.ok().body(response);
		} catch (Exception e) {
			//혹시나 예외가 발생하는 경우 dto 대신 error에 메시지를 넣어 반환한다
			String error = e.getMessage();
			ResponseDTO<TodoDTO> response = ResponseDTO.<TodoDTO>builder().error(error).build();
			return ResponseEntity.badRequest().body(response);
		}
	}
}

//요청 -> Controller -> Service -> Respository
//-> Service -> Controller -> 응답.
